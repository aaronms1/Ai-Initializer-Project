{"version":3,"file":"connection-factory.js","sourceRoot":"","sources":["connection-factory.ts"],"names":[],"mappings":"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","sourcesContent":["import axios, { AxiosInstance, Method } from \"axios\";\nimport { Observable, from, Subject } from \"rxjs\";\nimport { RSocketClient, JsonSerializer, IdentitySerializer } from \"rsocket-core\";\nimport RSocketWebSocketClient from \"rsocket-websocket-client\";\n\n/**\n * Create an RSocket client to interact with the backend.\n */\nconst rSocketClient = new RSocketClient({\n  serializers: {\n    data: JsonSerializer, // Serialize data as JSON\n    metadata: IdentitySerializer, // Serialize metadata as plain text\n  },\n  setup: {\n    keepAlive: 60000, // Keep-alive interval in milliseconds\n    lifetime: 180000, // Lifetime of the connection\n    dataMimeType: \"application/json\", // Data mime type for JSON\n    metadataMimeType: \"message/x.rsocket.routing.v0\", // Metadata for routing RSocket requests\n  },\n  transport: new RSocketWebSocketClient({\n    url: \"ws://localhost:7000\", // RSocket server WebSocket URL\n  }),\n});\n\n/**\n * Create a connection client for a dynamic service-method-action structure.\n *\n * @param config Configuration object containing the API prefix.\n * @returns An object with `call` and `rsocketCall` methods to interact with the backend.\n */\nexport function createConnectionClient(config: { prefix: string }) {\n  const instance: AxiosInstance = axios.create({\n    baseURL: config.prefix,\n    withCredentials: true, // Support for cookies if needed\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n\n  /**\n   * Call the backend service endpoint dynamically via HTTP.\n   *\n   * @param service Name of the backend service (e.g., MessageBridge).\n   * @param method The method on the service to invoke (e.g., processMessages).\n   * @param params Object containing request data (either query params or body).\n   * @param httpMethod HTTP method to use (e.g., GET, POST).\n   * @returns An RxJS Observable that emits the API call's response.\n   */\n  function call<T = any>(\n    service: string,\n    method: string,\n    params?: any,\n    httpMethod: Method = \"POST\"\n  ): Observable<T> {\n    const url = `/${service}/${method}`;\n\n    const request = instance.request<T>({\n      url,\n      method: httpMethod,\n      data: httpMethod === \"POST\" ? params : undefined,\n      params: httpMethod !== \"POST\" ? params : undefined,\n    });\n\n    // Convert the Promise-based Axios request to an Observable\n    return from(request.then((response) => response.data));\n  }\n\n  /**\n   * Call the backend service using RSocket. Supports request-response and request-stream interactions.\n   *\n   * @param route The RSocket route (e.g., \"user.request\").\n   * @param data The payload to send to the RSocket route.\n   * @param isStream Whether the call expects a stream of responses (true) or a single response (false).\n   * @returns An RxJS Observable that emits the response(s) from the RSocket server.\n   */\n  function rsocketCall<T = any>(\n    route: string,\n    data: any,\n    isStream: boolean = false\n  ): Observable<T> {\n    const subject = new Subject<T>();\n\n    // Establish connection and send request\n    rSocketClient.connect().subscribe({\n      onComplete: (rsocket) => {\n        const metadata = String.fromCharCode(route.length) + route; // Encode RSocket route in metadata\n\n        if (isStream) {\n          // Handle a request-stream interaction\n          rsocket.requestStream({ data, metadata }).subscribe({\n            onNext: (payload) => subject.next(payload.data),\n            onComplete: () => subject.complete(),\n            onError: (error) => subject.error(error),\n          });\n        } else {\n          // Handle a request-response interaction\n          rsocket.requestResponse({ data, metadata }).subscribe({\n            onComplete: (payload) => {\n              subject.next(payload.data);\n              subject.complete();\n            },\n            onError: (error) => subject.error(error),\n          });\n        }\n      },\n      onError: (error) => subject.error(error),\n    });\n\n    return subject.asObservable();\n  }\n\n  // Return a client object that exposes both `call` and `rsocketCall` methods.\n  return { call, rsocketCall };\n}\n\n/**\n * Create and export the default connection client instance.\n */\nconst client = createConnectionClient({ prefix: \"connect\" });\nexport default client;\n"]}