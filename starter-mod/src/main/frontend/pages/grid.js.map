{"version":3,"file":"grid.js","sourceRoot":"","sources":["grid.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef, useCallback } from 'react';\nimport { Subject, Observable } from 'rxjs';\nimport { debounceTime, scan } from 'rxjs/operators';\nimport GridRow from '../components/grid-row';\nimport './Grid.scss';\n\ninterface GridData {\n    content: string;\n    spanColumns: number;\n    spanRows: number;\n}\n\nconst getGridDataStream = (): Observable<GridData> => {\n    return new Observable<GridData>((observer) => {\n        const eventSource = new EventSource('/grid'); // SSE endpoint\n\n        eventSource.onmessage = (event: MessageEvent) => {\n            observer.next(JSON.parse(event.data));\n        };\n\n        eventSource.onerror = (error) => {\n            observer.error(error);\n            eventSource.close();\n        };\n\n        return () => eventSource.close();\n    });\n};\n\nexport interface GridProps {\n    columns: number;          // Number of columns in the grid\n    gap: string;              // Gap between rows and columns\n    className?: string;       // Optional class name for styling\n    children?: React.ReactNode; // Include children as valid prop\n}\n\nconst Grid: React.FC<GridProps> = ({ columns = 3, gap = '1rem', className = '' }) => {\n    const [allGridItems, setAllGridItems] = useState<GridData[]>([]);\n    const [visibleGridItems, setVisibleGridItems] = useState<GridData[]>([]);\n    const [currentBatch, setCurrentBatch] = useState<number>(1);\n\n    const BATCH_SIZE = 100;\n    const observerRef = useRef<IntersectionObserver | null>(null);\n\n    useEffect(() => {\n        const gridData$ = getGridDataStream().pipe(\n            scan((acc: GridData[], newItem: GridData) => [...acc, newItem], []), // Accumulate grid data\n            debounceTime(100) // Debounce rapid updates\n        );\n\n        const subscription = gridData$.subscribe({\n            next: (items) => setAllGridItems(items),\n            error: (error) => console.error('Error in grid data stream:', error),\n        });\n\n        return () => subscription.unsubscribe();\n    }, []);\n\n    useEffect(() => {\n        const startIndex = (currentBatch - 1) * BATCH_SIZE;\n        const endIndex = currentBatch * BATCH_SIZE;\n        setVisibleGridItems((prevItems) => [...prevItems, ...allGridItems.slice(startIndex, endIndex)]);\n    }, [currentBatch, allGridItems]);\n\n    const loadMoreItems = useCallback(() => {\n        setCurrentBatch((prevBatch) => prevBatch + 1); // Load more items\n    }, []);\n\n    const bottomElementRef = useCallback(\n        (node: HTMLDivElement | null) => {\n            if (observerRef.current) observerRef.current.disconnect();\n\n            if (node) {\n                observerRef.current = new IntersectionObserver((entries) => {\n                    if (entries[0].isIntersecting) loadMoreItems();\n                });\n\n                observerRef.current.observe(node);\n            }\n        },\n        [loadMoreItems]\n    );\n\n    const gridStyle: React.CSSProperties = {\n        display: 'grid',\n        gridTemplateColumns: `repeat(${columns}, 1fr)`,\n        gap,\n    };\n\n    return (\n        <div className={`grid ${className}`} style={gridStyle}>\n            {/* Render visible grid items as rows */}\n            {visibleGridItems.map((item, index) => (\n                <GridRow key={index} rowData={[item]} />\n            ))}\n            {/* Lazy loading trigger */}\n            <div ref={bottomElementRef} style={{ height: '1px' }} />\n        </div>\n    );\n};\n\nexport default Grid;"]}