{"version":3,"file":"embedding-settings.js","sourceRoot":"","sources":["embedding-settings.tsx"],"names":[],"mappings":";AAAA,2CAA2C;AAC3C,mEAAmE;AACnE,uGAAuG;AACvG,gBAAgB;AAChB,mEAAmE;AACnE,8CAA8C;AAC9C,EAAE;AACF,sCAAsC;AACtC,wGAAwG;AACxG,EAAE;AACF,wBAAwB;AACxB,4BAA4B;AAC5B,6CAA6C;AAC7C,KAAK;AACL,EAAE;AACF,kDAAkD;AAClD,gEAAgE;AAChE,sEAAsE;AACtE,6DAA6D;AAC7D,4DAA4D;AAC5D,4EAA4E;AAC5E,oCAAoC;AACpC,EAAE;AACF,kEAAkE;AAClE,iCAAiC;AACjC,qCAAqC;AACrC,6BAA6B;AAC7B,OAAO;AACP,EAAE;AACF,sCAAsC;AACtC,8BAA8B;AAC9B,OAAO;AACP,EAAE;AACF,4CAA4C;AAC5C,gFAAgF;AAChF,sEAAsE;AACtE,8BAA8B;AAC9B,OAAO;AACP,EAAE;AACF,yCAAyC;AACzC,6EAA6E;AAC7E,sEAAsE;AACtE,8BAA8B;AAC9B,OAAO;AACP,EAAE;AACF,4CAA4C;AAC5C,gFAAgF;AAChF,sEAAsE;AACtE,8BAA8B;AAC9B,OAAO;AACP,EAAE;AACF,yCAAyC;AACzC,4EAA4E;AAC5E,sEAAsE;AACtE,8BAA8B;AAC9B,OAAO;AACP,EAAE;AACF,wCAAwC;AACxC,2EAA2E;AAC3E,sEAAsE;AACtE,8BAA8B;AAC9B,OAAO;AACP,EAAE;AACF,6CAA6C;AAC7C,iFAAiF;AACjF,0EAA0E;AAC1E,8BAA8B;AAC9B,OAAO;AACP,EAAE;AACF,aAAa;AACb,SAAS;AACT,uDAAuD;AACvD,0HAA0H;AAC1H,gFAAgF;AAChF,uHAAuH;AACvH,4EAA4E;AAC5E,0HAA0H;AAC1H,iFAAiF;AACjF,uHAAuH;AACvH,6EAA6E;AAC7E,sHAAsH;AACtH,4EAA4E;AAC5E,uHAAuH;AACvH,wEAAwE;AACxE,mBAAmB;AACnB,aAAa;AACb,2CAA2C;AAC3C,iCAAiC;AACjC,0BAA0B;AAC1B,kBAAkB;AAClB,cAAc;AACd,cAAc;AACd,0DAA0D;AAC1D,2BAA2B;AAC3B,0DAA0D;AAC1D,2DAA2D;AAC3D,+BAA+B;AAC/B,mBAAmB;AACnB,gBAAgB;AAChB,4BAA4B;AAC5B,mBAAmB;AACnB,gGAAgG;AAChG,gBAAgB;AAChB,mCAAmC;AACnC,yCAAyC;AACzC,gGAAgG;AAChG,oBAAoB;AACpB,wBAAwB;AACxB,qEAAqE;AACrE,mBAAmB;AACnB,wBAAwB;AACxB,mBAAmB;AACnB,iBAAiB;AACjB,kBAAkB;AAClB,UAAU;AACV,OAAO;AACP,KAAK;AACL,EAAE;AACF,wCAAwC","sourcesContent":["// import React, { useState } from 'react';\n// import { ViewConfig } from '@vaadin/hilla-file-router/types.js';\n// // import { Button, Dialog, Details, VerticalLayout, Notification } from '@vaadin/react-components';\n// // @ts-ignore\n// import { EmbeddingService } from 'Frontend/generated/endpoints';\n// import { useNavigate } from 'react-router';\n//\n// export const config: ViewConfig = {\n//   menu: { order: 11, icon: 'line-awesome/svg/layer-group-solid.svg' }, title: 'Embedding Settings' };\n//\n// const anchorStyle = {\n//   textDecoration: 'none',\n//   color: 'var(--lumo-primary-text-color)',\n// };\n//\n// const EmbeddingSettingsView: React.FC = () => {\n//   const [embeddings, setEmbeddings] = useState<string[]>([]);\n//   const [conversations, setConversations] = useState<string[]>([]);\n//   const [dialogOpened, setDialogOpened] = useState(false);\n//   const [dialogMessage, setDialogMessage] = useState('');\n//   const [dialogAction, setDialogAction] = useState<() => void>(() => {});\n//   const navigate = useNavigate();\n//\n//   const openDialog = (message: string, action: () => void) => {\n//     setDialogMessage(message);\n//     setDialogAction(() => action);\n//     setDialogOpened(true);\n//   };\n//\n//   const handleDialogClose = () => {\n//     setDialogOpened(false);\n//   };\n//\n//   const word2VecEmbedding = async () => {\n//     const response = await EmbeddingService.processEmbedding('word2vec', '');\n//     Notification.show('Embedding created successfully' + response);\n//     setDialogOpened(false);\n//   };\n//\n//   const gloveEmbedding = async () => {\n//     const response = await EmbeddingService.processEmbedding('glove', '');\n//     Notification.show('Embedding created successfully' + response);\n//     setDialogOpened(false);\n//   };\n//\n//   const fastTextEmbedding = async () => {\n//     const response = await EmbeddingService.processEmbedding('fasttext', '');\n//     Notification.show('Embedding created successfully' + response);\n//     setDialogOpened(false);\n//   };\n//\n//   const bertEmbeddings = async () => {\n//     const response = await EmbeddingService.processEmbedding('bert', '');\n//     Notification.show('Embedding created successfully' + response);\n//     setDialogOpened(false);\n//   };\n//\n//   const gptEmbeddings = async () => {\n//     const response = await EmbeddingService.processEmbedding('gpt', '');\n//     Notification.show('Embedding created successfully' + response);\n//     setDialogOpened(false);\n//   };\n//\n//   const transformEmbedding = async () => {\n//     const response = await EmbeddingService.processEmbedding('transform', '');\n//     Notification.show('Embedding transformed successfully' + response);\n//     setDialogOpened(false);\n//   };\n//\n//   return (\n//     <>\n//       <section className=\"flex p-m gap-m items-end\">\n//         <Button onClick={() => openDialog('Are you sure you want to create a new embedding model?', word2VecEmbedding)}\n//                 style={{ backgroundColor: 'green' }}>Create Word2Vec</Button>\n//         <Button onClick={() => openDialog('Are you sure you want to create a new embedding model?', gloveEmbedding)}\n//                 style={{ backgroundColor: 'blue' }}>Create GloVe</Button>\n//         <Button onClick={() => openDialog('Are you sure you want to create a new embedding model?', fastTextEmbedding)}\n//                 style={{ backgroundColor: 'yellow' }}>Create FastText</Button>\n//         <Button onClick={() => openDialog('Are you sure you want to create a new embedding model?', bertEmbeddings)}\n//                 style={{ backgroundColor: 'purple' }}>Create BERT</Button>\n//         <Button onClick={() => openDialog('Are you sure you want to create a new embedding model?', gptEmbeddings)}\n//                 style={{ backgroundColor: 'orange' }}>Create GPT</Button>\n//         <Button onClick={() => openDialog('Are you sure you want to transform this embedding?', transformEmbedding)}\n//                 style={{ backgroundColor: 'red' }}>Transform</Button>\n//       </section>\n//       <ul>\n//         {embeddings.map((embedding) => (\n//           <li key={embedding}>\n//             {embedding}\n//           </li>\n//         ))}\n//       </ul>\n//       <Details summary=\"Conversation Histories\" opened>\n//         <VerticalLayout>\n//           {conversations.map((conversation, index) => (\n//             <a key={index} href=\"#\" style={anchorStyle}>\n//               {conversation}\n//             </a>\n//           ))}\n//         </VerticalLayout>\n//       </Details>\n//       <Dialog opened={dialogOpened} onOpenedChanged={(e) => setDialogOpened(e.detail.value)}>\n//         <div>\n//           <p>{dialogMessage}</p>\n//           <div className=\"flex gap-s\">\n//             <Button theme=\"primary\" onClick={() => { dialogAction(); handleDialogClose(); }}>\n//               Yes\n//             </Button>\n//             <Button theme=\"secondary\" onClick={handleDialogClose}>\n//               No\n//             </Button>\n//           </div>\n//         </div>\n//       </Dialog>\n//     </>\n//   );\n// };\n//\n// export default EmbeddingSettingsView;\n"]}