{"version":3,"file":"servers.js","sourceRoot":"","sources":["servers.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { NotificationService } from '../components/notifications';\nimport Button from '../components/button';\nimport Dialog from '../components/dialog';\nimport { ServersBridge } from '../bridges/servers-bridge';\nimport { ServerActions } from '../enums/server-actions';\nimport { ServerTypes } from '../enums/server-types';\nimport { firstValueFrom } from 'rxjs';\n\nconst ManageServersView: React.FC = () => {\n  const [dialogOpened, setDialogOpened] = useState(false);\n  const [dialogMessage, setDialogMessage] = useState('');\n  const [dialogAction, setDialogAction] = useState<() => void>(() => {});\n\n  const openDialog = (message: string, action: () => void) => {\n    setDialogMessage(message);\n    setDialogAction(() => action);\n    setDialogOpened(true);\n  };\n\n  const handleDialogClose = () => {\n    setDialogOpened(false);\n  };\n\n  const handleServerAction = async (action: ServerActions) => {\n    const result = await firstValueFrom(ServersBridge(ServerTypes.USOCKET, action));\n    NotificationService.show(`${ServerActions[action]} server: ${result}`);\n  };\n\n  return (\n    <>\n      <section className=\"flex p-m gap-m items-end\">\n        <Button\n          onClick={() => openDialog('Are you sure you want to start the server?', () => handleServerAction(ServerActions.START))}\n          style={{ backgroundColor: 'green' }}>\n          Start Server\n        </Button>\n        <Button\n          onClick={() => openDialog('Are you sure you want to stop the server?', () => handleServerAction(ServerActions.STOP))}\n          style={{ backgroundColor: 'red' }}>\n          Stop Server\n        </Button>\n        <Button\n          onClick={() => openDialog('Are you sure you want to restart the server?', () => handleServerAction(ServerActions.RESTART))}\n          style={{ backgroundColor: 'blue' }}>\n          Restart Server\n        </Button>\n      </section>\n      <Dialog\n        isOpen={dialogOpened}\n        message={dialogMessage}\n        onClose={handleDialogClose}\n        onOpenedChanged={(e) => setDialogOpened(e.target.value ?? false)}\n      >\n        <div>\n          <p>{dialogMessage}</p>\n          <div className=\"flex gap-s\">\n            <Button theme=\"primary\" onClick={() => {\n              dialogAction();\n              handleDialogClose();\n            }}>\n              Yes\n            </Button>\n            <Button theme=\"secondary\" onClick={handleDialogClose}>\n              No\n            </Button>\n          </div>\n        </div>\n      </Dialog>\n    </>\n  );\n};\n\n/**\n * <h1>{@link ManageServersView}</h1>\n */\nexport default ManageServersView;\n"]}