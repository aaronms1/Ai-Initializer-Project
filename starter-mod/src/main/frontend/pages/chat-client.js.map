{"version":3,"file":"chat-client.js","sourceRoot":"","sources":["chat-client.tsx"],"names":[],"mappings":";AAAA,OAAc,EAAa,QAAQ,EAAE,MAAM,OAAO,CAAC;AACnD,OAAO,EAAE,cAAc,EAAE,MAAM,0BAA0B,CAAC;AAE1D,OAAO,SAAS,MAAM,0BAA0B,CAAC,CAAC,uCAAuC;AACzF,OAAO,eAAe,MAAM,iCAAiC,CAAC,CAAC,8BAA8B;AAC7F,OAAO,MAAM,MAAM,+BAA+B,CAAC,CAAC,wBAAwB;AAC5E,OAAO,uBAAuB,CAAC,CAAC,4BAA4B;AAmB5D,SAAS,WAAW,CAAC,KAQpB;IACC,OAAO,IAAI,CAAC;AACd,CAAC;AAED,MAAM,cAAc,GAAa,GAAG,EAAE;IACpC,MAAM,CAAC,WAAW,EAAE,cAAc,CAAC,GAAG,QAAQ,CAAe,EAAE,CAAC,CAAC;IACjE,MAAM,CAAC,OAAO,EAAE,UAAU,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC;IAC9C,IAAI,YAA0B,CAAC;IAE/B,MAAM,iBAAiB,GAAG,CAAC,WAAmB,EAAE,EAAE;QAChD,MAAM,eAAe,GAAG;YACtB,IAAI,EAAE,WAAW;YACjB,IAAI,EAAE,IAAI,IAAI,EAAE,CAAC,kBAAkB,EAAE;YACrC,QAAQ,EAAE,MAAM;YAChB,cAAc,EAAE,CAAC;YACjB,OAAO,EAAE,oBAAoB,CAAC,WAAW,CAAC,MAAM,CAAC;SAClD,CAAC;QAEF,cAAc,CAAC,CAAC,eAAe,EAAE,EAAE,CAAC;YAClC,GAAG,eAAe;YAClB,EAAE,WAAW,EAAE,eAAe,EAAE,SAAS,EAAE,IAAI,EAAE;SAClD,CAAC,CAAC;QAEH,UAAU,CAAC,IAAI,CAAC,CAAC;QACjB,MAAM;aACH,WAAW,CAAC,cAAc,EAAE,EAAE,IAAI,EAAE,WAAW,EAAE,CAAC;aAClD,SAAS,CAAC;YACT,IAAI,EAAE,CAAC,UAAU,EAAE,EAAE;gBACnB,qBAAqB,CAAC,UAAU,EAAE,eAAe,CAAC,CAAC;gBACnD,UAAU,CAAC,KAAK,CAAC,CAAC;YACpB,CAAC;YACD,KAAK,EAAE,CAAC,KAAK,EAAE,EAAE;gBACf,OAAO,CAAC,KAAK,CAAC,gBAAgB,EAAE,KAAK,CAAC,CAAC;gBACvC,UAAU,CAAC,KAAK,CAAC,CAAC;YACpB,CAAC;SACF,CAAC,CAAC;IACP,CAAC,CAAC;IAEF,MAAM,qBAAqB,GAAG,CAAC,UAAe,EAAE,eAAoB,EAAE,EAAE;QACtE,MAAM,SAAS,GAAG;YAChB,IAAI,EAAE,UAAU;YAChB,IAAI,EAAE,IAAI,IAAI,EAAE,CAAC,kBAAkB,EAAE;YACrC,QAAQ,EAAE,IAAI;YACd,cAAc,EAAE,CAAC;YACjB,OAAO,EAAE,oBAAoB,CAAC,WAAW,CAAC,MAAM,CAAC;SAClD,CAAC;QAEF,MAAM,UAAU,GAAe,EAAE,WAAW,EAAE,eAAe,EAAE,SAAS,EAAE,CAAC;QAE3E,cAAc,CAAC,CAAC,eAAe,EAAE,EAAE,CAAC,CAAC,GAAG,eAAe,EAAE,UAAU,CAAC,CAAC,CAAC;IACxE,CAAC,CAAC;IAEF,MAAM,oBAAoB,GAAG,CAAC,KAAa,EAAE,EAAE,CAAC,CAC9C,eAAK,SAAS,EAAC,iBAAiB,aAC9B,eAAM,IAAI,EAAC,KAAK,gBAAY,WAAW,EAAC,OAAO,EAAE,GAAG,EAAE,CAAC,eAAe,CAAC,KAAK,EAAE,cAAc,CAAC,SAAS,CAAC,6BAAW,EAClH,eAAM,IAAI,EAAC,KAAK,gBAAY,aAAa,EAAC,OAAO,EAAE,GAAG,EAAE,CAAC,eAAe,CAAC,KAAK,EAAE,cAAc,CAAC,WAAW,CAAC,6BAAW,EACtH,eAAM,IAAI,EAAC,KAAK,gBAAY,OAAO,EAAC,OAAO,EAAE,GAAG,EAAE,CAAC,eAAe,CAAC,KAAK,EAAE,cAAc,CAAC,KAAK,CAAC,mCAAY,EAC3G,eAAM,IAAI,EAAC,KAAK,gBAAY,OAAO,EAAC,OAAO,EAAE,GAAG,EAAE,CAAC,eAAe,CAAC,KAAK,EAAE,cAAc,CAAC,KAAK,CAAC,6BAAW,IACtG,CACP,CAAC;IAEF,MAAM,eAAe,GAAG,CAAC,KAAa,EAAE,MAAsB,EAAE,EAAE;QAChE,8BAA8B;IAChC,CAAC,CAAC;IAEF,OAAO,CACL,0BACE,KAAC,WAAW,IAAC,KAAK,EAAE,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,WAAW,EAAE,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,MAAM,CAAC,CAAC,IAAI,EAAoC,EAAE,CAAC,IAAI,IAAI,IAAI,CAAC,GAAI,EACxJ,KAAC,SAAS,IACR,KAAK,EAAC,aAAa,EACnB,KAAK,EAAE,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,EACxF,QAAQ,QACR,KAAK,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE,GACxB,EACD,OAAO,IAAI,uCAAqB,EACjC,2BACE,KAAC,eAAe,IAAC,MAAM,EAAE,iBAAiB,EAAE,WAAW,EAAC,sBAAsB,GAAG,GAC1E,IACL,CACP,CAAC;AACJ,CAAC,CAAC;AAEF;;GAEG;AACH,eAAe,cAAc,CAAC","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { MessageActions } from '../enums/message-actions';\nimport { Subscription } from 'rxjs';\nimport InputArea from '../components/input-area'; // Handles AI responses in a text field\nimport MessageInputBar from '../components/message-input-bar'; // Input bar for user messages\nimport client from '../bridges/connection-factory'; // Import RSocket client\nimport './ChatClientView.scss'; // Include necessary styling\n\ninterface MessageSet {\n  userMessage: {\n    text: string;\n    time: string;\n    userName: string;\n    userColorIndex: number;\n    options: React.ReactNode;\n  };\n  aiMessage?: {\n    text: string;\n    time: string;\n    userName: string;\n    userColorIndex: number;\n    options: React.ReactNode;\n  } | null;\n}\n\nfunction MessageList(props: {\n  items: {\n    text: string;\n    time: string;\n    userName: string;\n    userColorIndex: number;\n    options: React.ReactNode;\n  }[]\n}) {\n  return null;\n}\n\nconst ChatClientView: React.FC = () => {\n  const [messageSets, setMessageSets] = useState<MessageSet[]>([]);\n  const [loading, setLoading] = useState(false);\n  let subscription: Subscription;\n\n  const handleSendMessage = (userMessage: string) => {\n    const userMessageData = {\n      text: userMessage,\n      time: new Date().toLocaleTimeString(),\n      userName: 'User',\n      userColorIndex: 1,\n      options: renderMessageOptions(messageSets.length),\n    };\n\n    setMessageSets((prevMessageSets) => [\n      ...prevMessageSets,\n      { userMessage: userMessageData, aiMessage: null },\n    ]);\n\n    setLoading(true);\n    client\n      .rsocketCall('user.request', { text: userMessage })\n      .subscribe({\n        next: (aiResponse) => {\n          handleReceiveResponse(aiResponse, userMessageData);\n          setLoading(false);\n        },\n        error: (error) => {\n          console.error('RSocket error:', error);\n          setLoading(false);\n        },\n      });\n  };\n\n  const handleReceiveResponse = (aiResponse: any, userMessageData: any) => {\n    const aiMessage = {\n      text: aiResponse,\n      time: new Date().toLocaleTimeString(),\n      userName: 'AI',\n      userColorIndex: 2,\n      options: renderMessageOptions(messageSets.length),\n    };\n\n    const messageSet: MessageSet = { userMessage: userMessageData, aiMessage };\n\n    setMessageSets((prevMessageSets) => [...prevMessageSets, messageSet]);\n  };\n\n  const renderMessageOptions = (index: number) => (\n    <div className=\"message-options\">\n      <span role=\"img\" aria-label=\"thumbs up\" onClick={() => handleIconClick(index, MessageActions.THUMBS_UP)}>👍</span>\n      <span role=\"img\" aria-label=\"thumbs down\" onClick={() => handleIconClick(index, MessageActions.THUMBS_DOWN)}>👎</span>\n      <span role=\"img\" aria-label=\"trash\" onClick={() => handleIconClick(index, MessageActions.TRASH)}>🗑️</span>\n      <span role=\"img\" aria-label=\"retry\" onClick={() => handleIconClick(index, MessageActions.RETRY)}>🔄</span>\n    </div>\n  );\n\n  const handleIconClick = (index: number, action: MessageActions) => {\n    // Handle the action if needed\n  };\n\n  return (\n    <div>\n      <MessageList items={messageSets.map(set => [set.userMessage, set.aiMessage]).flat().filter((item): item is NonNullable<typeof item> => item != null)} />\n      <InputArea\n        label=\"AI Response\"\n        value={messageSets.length > 0 ? messageSets[messageSets.length - 1].aiMessage?.text : ''}\n        readonly\n        style={{ width: '100%' }}\n      />\n      {loading && <div>Loading...</div>}\n      <footer>\n        <MessageInputBar onSend={handleSendMessage} placeholder=\"Type your message...\" />\n      </footer>\n    </div>\n  );\n};\n\n/**\n * <h1>{@link ChatClientView}</h1>\n */\nexport default ChatClientView;\n"]}