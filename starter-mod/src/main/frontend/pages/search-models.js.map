{"version":3,"file":"search-models.js","sourceRoot":"","sources":["search-models.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Button from \"../components/button\";\nimport { SearchModelsBridge } from \"../bridges/search-models-bridge\";\nimport { DownloadActions } from \"../enums/download-actions\";\nimport { NotificationService } from \"../components/notifications\";\nimport Grid from \"./grid\";\nimport { firstValueFrom } from \"rxjs\";\n\ninterface ModelData {\n    id: string;\n    modelId: string;\n    likes: number;\n    trendingScore: number;\n    downloads: number;\n    pipelineTag: string;\n    libraryName: string;\n    createdAt: string;\n}\n\ninterface SearchModelsViewProps {\n    searchQuery: string;\n    onModelsFetched: (models: ModelData[]) => void;\n    onLoading: (loading: boolean) => void;\n}\n\nconst gridCellStyle: React.CSSProperties = {\n    padding: \"0.75rem\",\n    textAlign: \"center\",\n};\n\nconst borderedCellStyle: React.CSSProperties = {\n    ...gridCellStyle,\n    gridColumn: \"span 1\",\n    border: \"1px solid #ccc\",\n};\n\nconst SearchModelsView: React.FC<SearchModelsViewProps> = ({\n    searchQuery,\n    onModelsFetched,\n    onLoading,\n}) => {\n    const [models, setModels] = useState<ModelData[]>([]);\n\n    const fetchAndSetModels = async () => {\n        onLoading(true);\n        try {\n            const response = await firstValueFrom(SearchModelsBridge(DownloadActions.SEARCH));\n            setModels(response);\n            onModelsFetched(response);\n            notify(\"Models fetched successfully\", \"success\");\n        } catch (error) {\n            console.error(\"Error fetching models:\", error);\n            notify(\"Error fetching models. Please try again.\", \"error\");\n        } finally {\n            onLoading(false);\n        }\n    };\n\n    const notify = (message: string, type: \"success\" | \"error\" | \"info\") => {\n        NotificationService.show(message, type);\n    };\n\n    const handleDownload = async (modelId: string) => {\n        try {\n            await firstValueFrom(SearchModelsBridge(DownloadActions.DOWNLOAD_LLM_MODEL));\n            notify(\"Model downloaded successfully\", \"success\");\n        } catch (error) {\n            console.error(\"Error downloading model:\", error);\n            notify(\"Error downloading model. Please try again.\", \"error\");\n        }\n    };\n\n    useEffect(() => {\n        if (searchQuery) {\n            fetchAndSetModels().then(r => r);\n        }\n    }, [searchQuery, onLoading, onModelsFetched]);\n\n    const renderModelRow = (model: ModelData) => (\n        <div key={model.id} style={{ display: \"contents\" }}>\n            <div style={borderedCellStyle}>\n                <Button onClick={() => handleDownload(model.id)} aria-label=\"Download\">\n                    ⬇️\n                </Button>\n            </div>\n            <div style={gridCellStyle}>{model.id}</div>\n            <div style={gridCellStyle}>{model.modelId}</div>\n        </div>\n    );\n\n    return (\n        <Grid columns={3} gap=\"1rem\" className=\"models-grid\">\n            {models.map(renderModelRow) as React.ReactNode}\n        </Grid>\n    );\n};\n/**\n * <h1>{@link SearchModelsView}</h1>\n */\nexport default SearchModelsView;\n"]}