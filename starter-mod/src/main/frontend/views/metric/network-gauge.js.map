{"version":3,"file":"network-gauge.js","sourceRoot":"","sources":["network-gauge.tsx"],"names":[],"mappings":";AAAA,OAAc,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AACnD,OAAO,EAAE,WAAW,EAAE,MAAM,8BAA8B,CAAC;AAC3D,OAAO,EAAE,OAAO,EAAE,MAAM,WAAW,CAAC;AACpC,OAAO,EAAE,YAAY,EAAE,MAAM,6BAA6B,CAAC;AAU3D,MAAM,YAAY,GAAgC,CAAC,EAAE,KAAK,EAAE,SAAS,EAAE,EAAE,EAAE;IACzE,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;IAEtC,MAAM,SAAS,GAAG,KAAK,IAAI,EAAE;QAC3B,MAAM,IAAI,GAAG,MAAM,OAAO,CAAC,UAAU,CAAC,YAAY,CAAC,OAAO,CAA0B,CAAC;QACrF,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACvB,CAAC,CAAC;IAEF,SAAS,CAAC,GAAG,EAAE;QACb,SAAS,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QACtC,MAAM,UAAU,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC,SAAS,EAAE,EAAE,IAAI,CAAC,CAAC;QACxD,OAAO,GAAG,EAAE,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;IACzC,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,MAAM,YAAY,GAAG;QACnB,KAAK,EAAE,SAAS,IAAI,KAAK;QACzB,KAAK,EAAE;YACL,GAAG,EAAE,GAAG;YACR,SAAS,EAAE,EAAE;YACb,SAAS,EAAE,CAAC;YACZ,MAAM,EAAE;gBACN,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,KAAK,EAAE,SAAS,EAAE;gBACrC,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,KAAK,EAAE,SAAS,EAAE;gBACtC,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,KAAK,EAAE,SAAS,EAAE;aACxC;SACF;QACD,OAAO,EAAE;YACP,KAAK,EAAE,SAAS,IAAI,KAAK;SAC1B;KACF,CAAC;IAEF,OAAO,KAAC,WAAW,OAAK,YAAY,GAAI,CAAC;AAC3C,CAAC,CAAC;AAEF,eAAe,YAAY,CAAC","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { RadialGauge } from '@progress/kendo-react-gauges';\nimport { Metrics } from './Metrics';\nimport { MetricsTypes } from 'Frontend/enums/MetricsTypes';\n\ninterface NetworkGaugeProps {\n  value?: number;\n}\n\ninterface MetricData {\n  value: number;\n}\n\nconst NetworkGauge: React.FC<NetworkGaugeProps> = ({ value: propValue }) => {\n  const [value, setValue] = useState(0);\n\n  const fetchData = async () => {\n    const data = await Metrics.getMetrics(MetricsTypes.NETWORK) as unknown as MetricData;\n    setValue(data.value);\n  };\n\n  useEffect(() => {\n    fetchData().then(r => console.log(r));\n    const intervalId = setInterval(() => fetchData(), 1000);\n    return () => clearInterval(intervalId);\n  }, []);\n\n  const gaugeOptions = {\n    value: propValue ?? value,\n    scale: {\n      max: 100,\n      majorUnit: 20,\n      minorUnit: 2,\n      ranges: [\n        { from: 0, to: 40, color: '#28a745' },\n        { from: 40, to: 70, color: '#ffc107' },\n        { from: 70, to: 100, color: '#dc3545' }\n      ]\n    },\n    pointer: {\n      value: propValue ?? value\n    }\n  };\n\n  return <RadialGauge {...gaugeOptions} />;\n};\n\nexport default NetworkGauge;\n"]}