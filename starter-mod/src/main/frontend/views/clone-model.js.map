{"version":3,"file":"clone-model.js","sourceRoot":"","sources":["clone-model.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,EAAE,EAAE,SAAS,EAAE,MAAM,OAAO,CAAC;AAEzC,OAAO,EAAE,MAAM,EAAE,YAAY,EAAE,SAAS,EAAE,MAAM,0BAA0B,CAAC;AAC3E,OAAO,EAAE,sBAAsB,EAAE,MAAM,iCAAiC,CAAC;AAEzE,MAAM,CAAC,MAAM,MAAM,GAAe;IAChC,IAAI,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,IAAI,EAAE,kCAAkC,EAAE;IAC5D,KAAK,EAAE,aAAa;CACrB,CAAC;AASF,MAAM,cAAe,SAAQ,SAAmD;IAC9E,YAAY,KAA0B;QACpC,KAAK,CAAC,KAAK,CAAC,CAAC;QAOf,gBAAW,GAAG,KAAK,IAAI,EAAE;YACvB,MAAM,EAAE,UAAU,EAAE,YAAY,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;YAChD,MAAM,QAAQ,GAAG,MAAM,sBAAsB,CAAC,UAAU,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC;YACnF,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC9B,CAAC,CAAC;QAEF,sBAAiB,GAAG,CAAC,CAAsC,EAAE,EAAE;YAC7D,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,KAAK,EAAkC,CAAC,CAAC;QACrF,CAAC,CAAC;QAdA,IAAI,CAAC,KAAK,GAAG;YACX,UAAU,EAAE,EAAE;YACd,YAAY,EAAE,EAAE;SACjB,CAAC;IACJ,CAAC;IAYD,MAAM;QACJ,MAAM,EAAE,UAAU,EAAE,YAAY,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QAEhD,OAAO,CACL,4BACE,mBAAS,SAAS,EAAC,0BAA0B,aAC3C,KAAC,SAAS,IACR,KAAK,EAAC,aAAa,EACnB,IAAI,EAAC,YAAY,EACjB,KAAK,EAAE,UAAU,EACjB,cAAc,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,GAChD,EACF,KAAC,SAAS,IACR,KAAK,EAAC,eAAe,EACrB,IAAI,EAAC,cAAc,EACnB,KAAK,EAAE,YAAY,EACnB,cAAc,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,GAChD,EACF,KAAC,MAAM,IAAC,OAAO,EAAE,IAAI,CAAC,WAAW,4BAExB,IACD,GACT,CACJ,CAAC;IACJ,CAAC;CACF;AAED,eAAe,cAAc,CAAC","sourcesContent":["import React, { Component } from 'react';\nimport { ViewConfig } from '@vaadin/hilla-file-router/types.js';\nimport { Button, Notification, TextField } from '@vaadin/react-components';\nimport { CloneLocalModelService } from 'Frontend/generated/endpoints.js';\n\nexport const config: ViewConfig = {\n  menu: { order: 2, icon: 'line-awesome/svg/clone-solid.svg' },\n  title: 'Clone Model',\n};\n\ninterface CloneModelViewProps {}\n\ninterface CloneModelViewState {\n  sourcePath: string;\n  snapshotPath: string;\n}\n\nclass CloneModelView extends Component<CloneModelViewProps, CloneModelViewState> {\n  constructor(props: CloneModelViewProps) {\n    super(props);\n    this.state = {\n      sourcePath: '',\n      snapshotPath: ''\n    };\n  }\n\n  handleClone = async () => {\n    const { sourcePath, snapshotPath } = this.state;\n    const response = await CloneLocalModelService.cloneModel(sourcePath, snapshotPath);\n    Notification.show(response);\n  };\n\n  handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ [e.target.name]: e.target.value } as Partial<CloneModelViewState>);\n  };\n\n  render() {\n    const { sourcePath, snapshotPath } = this.state;\n\n    return (\n      <>\n        <section className=\"flex p-m gap-m items-end\">\n          <TextField\n            label=\"Source Path\"\n            name=\"sourcePath\"\n            value={sourcePath}\n            onValueChanged={(e) => this.handleInputChange(e)}\n          />\n          <TextField\n            label=\"Snapshot Path\"\n            name=\"snapshotPath\"\n            value={snapshotPath}\n            onValueChanged={(e) => this.handleInputChange(e)}\n          />\n          <Button onClick={this.handleClone}>\n            Clone Model\n          </Button>\n        </section>\n      </>\n    );\n  }\n}\n\nexport default CloneModelView;\n"]}