{"version":3,"file":"main-message-list.js","sourceRoot":"","sources":["main-message-list.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { MessageList } from '@vaadin/react-components/MessageList.js';\nimport ResponseArea from '../chat/response-area';\n// @ts-ignore\nimport { MessagesIface } from 'Frontend/generated/endpoints';\n\ninterface MessageSet {\n  userMessage: {\n    text: string;\n    time: string;\n    userName: string;\n    userColorIndex: number;\n    options: React.ReactNode;\n  };\n  aiMessage: {\n    text: string;\n    time: string;\n    userName: string;\n    userColorIndex: number;\n    options: React.ReactNode;\n  };\n}\n\nconst MainMessageListArea: React.FC = () => {\n  const [messageSets, setMessageSets] = useState<MessageSet[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [userRequest, setUserRequest] = useState('');\n\n  const addMessageSet = (userRequest: string, aiResponse: string) => {\n    const userMessage = {\n      text: userRequest,\n      time: new Date().toLocaleTimeString(),\n      userName: 'User',\n      userColorIndex: 1,\n      options: renderMessageOptions(messageSets.length),\n    };\n\n    const aiMessage = {\n      text: aiResponse,\n      time: new Date().toLocaleTimeString(),\n      userName: 'AI',\n      userColorIndex: 2,\n      options: renderMessageOptions(messageSets.length),\n    };\n\n    const messageSet: MessageSet = { userMessage, aiMessage };\n\n    setMessageSets((prevMessageSets) => [...prevMessageSets, messageSet]);\n  };\n\n  const handleUserRequest = (userRequest: string) => {\n    setUserRequest(userRequest);\n  };\n\n  const handleResponseReceived = (aiResponse: string) => {\n    addMessageSet(userRequest, aiResponse);\n  };\n\n  const renderMessageOptions = (index: number) => (\n    <div className=\"message-options\">\n      <span role=\"img\" aria-label=\"thumbs up\" onClick={() => handleIconClick(index)}>👍</span>\n      <span role=\"img\" aria-label=\"thumbs down\" onClick={() => handleIconClick(index)}>👎</span>\n      <span role=\"img\" aria-label=\"trash\" onClick={() => handleIconClick(index)}>🗑️</span>\n      <span role=\"img\" aria-label=\"retry\" onClick={() => handleIconClick(index)}>🔄</span>\n    </div>\n  );\n\n  const handleIconClick = (index: number) => {\n    MessagesIface.processMessages({})\n      .then(() => {\n        // Handle the action if needed\n      });\n  };\n\n  return (\n    <>\n      <MessageList items={messageSets.map(set => [set.userMessage, set.aiMessage]).flat()} />\n      <ResponseArea\n        request={userRequest}\n        onResponseReceived={handleResponseReceived}\n        onLoading={setLoading}\n      />\n      {loading && <div>Loading...</div>}\n    </>\n  );\n};\n\nexport default MainMessageListArea;\n"]}