{"version":3,"file":"model-merge.js","sourceRoot":"","sources":["model-merge.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { ViewConfig } from '@vaadin/hilla-file-router/types.js';\nimport { Button, Notification, TextField, Dialog } from '@vaadin/react-components';\nimport { MergeDestroyModelService } from 'Frontend/generated/endpoints.js';\n\n/**\n * {@link config}\n * <p>\n *   Configuration for the view, including menu order, icon, and title.\n * </p>\n */\nexport const config: ViewConfig = {\n  menu: { order: 5, icon: 'line-awesome/svg/merge-solid.svg' },\n  title: 'Merge Models',\n};\n\n/**\n * {@link MergeModelViewState}\n * <p>\n *   Interface for the state of the MergeModelView component.\n * </p>\n */\ninterface MergeModelViewState {\n  modelPath1: string;\n  modelPath2: string;\n  dialogOpened: boolean;\n}\n\n/**\n * {@link MergeModelView}\n * <p>\n *   This component allows users to merge two models by providing their paths.\n *   It includes input fields for the model paths and a button to trigger the merge.\n *   A dialog is shown to confirm the merge action.\n * </p>\n */\nclass MergeModelView extends Component<{}, MergeModelViewState> {\n  constructor(props: {}) {\n    super(props);\n    this.state = {\n      modelPath1: '',\n      modelPath2: '',\n      dialogOpened: false\n    };\n  }\n\n  /**\n   * {@link handleMerge}\n   * <p>\n   *   This function handles the merge action by calling the MergeDestroyModelService.\n   *   It shows a notification with the response and closes the dialog.\n   * </p>\n   */\n  handleMerge = async () => {\n    const { modelPath1, modelPath2 } = this.state;\n    const response = await MergeDestroyModelService.mergeModels(modelPath1, modelPath2);\n    Notification.show(response);\n    this.setState({ dialogOpened: false });\n  };\n\n  /**\n   * {@link openDialog}\n   * <p>\n   *   This function opens the confirmation dialog.\n   * </p>\n   */\n  openDialog = () => {\n    this.setState({ dialogOpened: true });\n  };\n\n  /**\n   * {@link closeDialog}\n   * <p>\n   *   This function closes the confirmation dialog.\n   * </p>\n   */\n  closeDialog = () => {\n    this.setState({ dialogOpened: false });\n  };\n\n  /**\n   * {@link handleInputChange1}\n   * <p>\n   *   This function updates the state with the value of the first model path input field.\n   * </p>\n   */\n  handleInputChange1 = (e: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ modelPath1: e.target.value });\n  };\n\n  /**\n   * {@link handleInputChange2}\n   * <p>\n   *   This function updates the state with the value of the second model path input field.\n   * </p>\n   */\n  handleInputChange2 = (e: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ modelPath2: e.target.value });\n  };\n\n  /**\n   * {@link render}\n   * <p>\n   *   This function renders the component, including input fields for model paths,\n   *   a button to trigger the merge, and a confirmation dialog.\n   * </p>\n   */\n  render() {\n    const { modelPath1, modelPath2, dialogOpened } = this.state;\n\n    return (\n      <>\n        <section className=\"flex p-m gap-m items-end\">\n          <TextField\n            label=\"Model Path 1\"\n            value={modelPath1}\n            onValueChanged={(e) => this.handleInputChange1(e)}\n          />\n          <TextField\n            label=\"Model Path 2\"\n            value={modelPath2}\n            onValueChanged={(e) => this.handleInputChange2(e)}\n          />\n          <Button onClick={this.openDialog}>\n            Merge Models\n          </Button>\n        </section>\n        <Dialog opened={dialogOpened} onOpenedChanged={(e) => this.setState({ dialogOpened: e.detail.value })}>\n          <div>\n            <p>Are you sure you want to merge these models?</p>\n            <div className=\"flex gap-s\">\n              <Button theme=\"primary\" onClick={this.handleMerge}>\n                Yes\n              </Button>\n              <Button theme=\"secondary\" onClick={this.closeDialog}>\n                No\n              </Button>\n            </div>\n          </div>\n        </Dialog>\n      </>\n    );\n  }\n}\n\nexport default MergeModelView;\n"]}