{"version":3,"file":"embedding-settings.js","sourceRoot":"","sources":["embedding-settings.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { ViewConfig } from '@vaadin/hilla-file-router/types.js';\nimport { Button, Dialog, Details, VerticalLayout, Notification } from '@vaadin/react-components';\n// @ts-ignore\nimport { EmbeddingService } from 'Frontend/generated/endpoints';\nimport { useNavigate } from 'react-router';\n\nexport const config: ViewConfig = {\n  menu: { order: 11, icon: 'line-awesome/svg/layer-group-solid.svg' }, title: 'Embedding Settings' };\n\nconst anchorStyle = {\n  textDecoration: 'none',\n  color: 'var(--lumo-primary-text-color)',\n};\n\nconst EmbeddingSettingsView: React.FC = () => {\n  const [embeddings, setEmbeddings] = useState<string[]>([]);\n  const [conversations, setConversations] = useState<string[]>([]);\n  const [dialogOpened, setDialogOpened] = useState(false);\n  const [dialogMessage, setDialogMessage] = useState('');\n  const [dialogAction, setDialogAction] = useState<() => void>(() => {});\n  const navigate = useNavigate();\n\n  const openDialog = (message: string, action: () => void) => {\n    setDialogMessage(message);\n    setDialogAction(() => action);\n    setDialogOpened(true);\n  };\n\n  const handleDialogClose = () => {\n    setDialogOpened(false);\n  };\n\n  const word2VecEmbedding = async () => {\n    const response = await EmbeddingService.processEmbedding('word2vec', '');\n    Notification.show('Embedding created successfully' + response);\n    setDialogOpened(false);\n  };\n\n  const gloveEmbedding = async () => {\n    const response = await EmbeddingService.processEmbedding('glove', '');\n    Notification.show('Embedding created successfully' + response);\n    setDialogOpened(false);\n  };\n\n  const fastTextEmbedding = async () => {\n    const response = await EmbeddingService.processEmbedding('fasttext', '');\n    Notification.show('Embedding created successfully' + response);\n    setDialogOpened(false);\n  };\n\n  const bertEmbeddings = async () => {\n    const response = await EmbeddingService.processEmbedding('bert', '');\n    Notification.show('Embedding created successfully' + response);\n    setDialogOpened(false);\n  };\n\n  const gptEmbeddings = async () => {\n    const response = await EmbeddingService.processEmbedding('gpt', '');\n    Notification.show('Embedding created successfully' + response);\n    setDialogOpened(false);\n  };\n\n  const transformEmbedding = async () => {\n    const response = await EmbeddingService.processEmbedding('transform', '');\n    Notification.show('Embedding transformed successfully' + response);\n    setDialogOpened(false);\n  };\n\n  return (\n    <>\n      <section className=\"flex p-m gap-m items-end\">\n        <Button onClick={() => openDialog('Are you sure you want to create a new embedding model?', word2VecEmbedding)}\n                style={{ backgroundColor: 'green' }}>Create Word2Vec</Button>\n        <Button onClick={() => openDialog('Are you sure you want to create a new embedding model?', gloveEmbedding)}\n                style={{ backgroundColor: 'blue' }}>Create GloVe</Button>\n        <Button onClick={() => openDialog('Are you sure you want to create a new embedding model?', fastTextEmbedding)}\n                style={{ backgroundColor: 'yellow' }}>Create FastText</Button>\n        <Button onClick={() => openDialog('Are you sure you want to create a new embedding model?', bertEmbeddings)}\n                style={{ backgroundColor: 'purple' }}>Create BERT</Button>\n        <Button onClick={() => openDialog('Are you sure you want to create a new embedding model?', gptEmbeddings)}\n                style={{ backgroundColor: 'orange' }}>Create GPT</Button>\n        <Button onClick={() => openDialog('Are you sure you want to transform this embedding?', transformEmbedding)}\n                style={{ backgroundColor: 'red' }}>Transform</Button>\n      </section>\n      <ul>\n        {embeddings.map((embedding) => (\n          <li key={embedding}>\n            {embedding}\n          </li>\n        ))}\n      </ul>\n      <Details summary=\"Conversation Histories\" opened>\n        <VerticalLayout>\n          {conversations.map((conversation, index) => (\n            <a key={index} href=\"#\" style={anchorStyle}>\n              {conversation}\n            </a>\n          ))}\n        </VerticalLayout>\n      </Details>\n      <Dialog opened={dialogOpened} onOpenedChanged={(e) => setDialogOpened(e.detail.value)}>\n        <div>\n          <p>{dialogMessage}</p>\n          <div className=\"flex gap-s\">\n            <Button theme=\"primary\" onClick={() => { dialogAction(); handleDialogClose(); }}>\n              Yes\n            </Button>\n            <Button theme=\"secondary\" onClick={handleDialogClose}>\n              No\n            </Button>\n          </div>\n        </div>\n      </Dialog>\n    </>\n  );\n};\n\nexport default EmbeddingSettingsView;\n"]}