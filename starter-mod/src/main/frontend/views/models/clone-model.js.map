{"version":3,"file":"clone-model.js","sourceRoot":"","sources":["clone-model.tsx"],"names":[],"mappings":";AAAA,OAAc,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AAExC,OAAO,EACL,MAAM,EACN,MAAM,EACN,YAAY,EACZ,SAAS,EACV,MAAM,0BAA0B,CAAC;AAClC,OAAO,EAAE,MAAM,EAAE,MAAM,UAAU,CAAC;AAElC,OAAO,EAAE,YAAY,EAAE,MAAM,6BAA6B,CAAC;AAE3D,MAAM,CAAC,MAAM,MAAM,GAAe;IAChC,IAAI,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,IAAI,EAAE,kCAAkC,EAAE;IAC5D,KAAK,EAAE,OAAO;CACf,CAAC;AAEF,MAAM,cAAc,GAAa,GAAG,EAAE;IACpC,MAAM,CAAC,UAAU,EAAE,aAAa,CAAC,GAAG,QAAQ,CAAC,EAAE,CAAC,CAAC;IACjD,MAAM,CAAC,YAAY,EAAE,eAAe,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC;IACxD,MAAM,CAAC,aAAa,EAAE,gBAAgB,CAAC,GAAG,QAAQ,CAAC,EAAE,CAAC,CAAC;IACvD,MAAM,CAAC,YAAY,EAAE,eAAe,CAAC,GAAG,QAAQ,CAAa,GAAG,EAAE,GAAE,CAAC,CAAC,CAAC;IAEvE,MAAM,UAAU,GAAG,CAAC,OAAe,EAAE,MAAkB,EAAE,EAAE;QACzD,gBAAgB,CAAC,OAAO,CAAC,CAAC;QAC1B,eAAe,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,CAAC;QAC9B,eAAe,CAAC,IAAI,CAAC,CAAC;IACxB,CAAC,CAAC;IAEF,MAAM,iBAAiB,GAAG,GAAG,EAAE;QAC7B,eAAe,CAAC,KAAK,CAAC,CAAC;IACzB,CAAC,CAAC;IAEF,MAAM,WAAW,GAAG,KAAK,IAAI,EAAE;QAC7B,MAAM,QAAQ,GAAG,MAAM,MAAM,CAAC,SAAS,CAAC,YAAY,CAAC,KAAK,EAAE,UAAU,EAAE,EAAE,CAAC,CAAC;QAC5E,YAAY,CAAC,IAAI,CAAC,sBAAsB,GAAG,QAAQ,CAAC,CAAC;QACrD,eAAe,CAAC,KAAK,CAAC,CAAC;IACzB,CAAC,CAAC;IAEF,MAAM,iBAAiB,GAAG,CAAC,CAA6B,EAAE,EAAE;QAC1D,aAAa,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAChC,CAAC,CAAC;IAEF,OAAO,CACL,8BACE,mBAAS,SAAS,EAAC,0BAA0B,aAC3C,KAAC,SAAS,IACR,KAAK,EAAC,aAAa,EACnB,KAAK,EAAE,UAAU,EACjB,cAAc,EAAE,iBAAiB,GACjC,EACF,KAAC,MAAM,IACL,OAAO,EAAE,GAAG,EAAE,CAAC,UAAU,CAAC,4CAA4C,EAAE,WAAW,CAAC,EACpF,KAAK,EAAE,EAAE,eAAe,EAAE,MAAM,EAAE,4BAAsB,IAClD,EACV,KAAC,MAAM,IAAC,MAAM,EAAE,YAAY,EAAE,eAAe,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,YACnF,0BACE,sBAAI,aAAa,GAAK,EACtB,eAAK,SAAS,EAAC,YAAY,aACzB,KAAC,MAAM,IAAC,KAAK,EAAC,SAAS,EAAC,OAAO,EAAE,GAAG,EAAE;wCACpC,YAAY,EAAE,CAAC;wCACf,iBAAiB,EAAE,CAAC;oCACtB,CAAC,oBAEQ,EACT,KAAC,MAAM,IAAC,KAAK,EAAC,WAAW,EAAC,OAAO,EAAE,iBAAiB,mBAE3C,IACL,IACF,GACC,IACR,CACJ,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,cAAc,CAAC","sourcesContent":["import React, { useState } from 'react';\nimport { ViewConfig } from '@vaadin/hilla-file-router/types.js';\nimport {\n  Button,\n  Dialog,\n  Notification,\n  TextField\n} from '@vaadin/react-components';\nimport { Models } from './Models';\nimport { TextFieldValueChangedEvent } from '@vaadin/text-field';\nimport { ModelActions } from 'Frontend/enums/ModelActions';\n\nexport const config: ViewConfig = {\n  menu: { order: 2, icon: 'line-awesome/svg/clone-solid.svg' },\n  title: 'Clone',\n};\n\nconst CloneModelView: React.FC = () => {\n  const [sourcePath, setSourcePath] = useState('');\n  const [dialogOpened, setDialogOpened] = useState(false);\n  const [dialogMessage, setDialogMessage] = useState('');\n  const [dialogAction, setDialogAction] = useState<() => void>(() => {});\n\n  const openDialog = (message: string, action: () => void) => {\n    setDialogMessage(message);\n    setDialogAction(() => action);\n    setDialogOpened(true);\n  };\n\n  const handleDialogClose = () => {\n    setDialogOpened(false);\n  };\n\n  const handleClone = async () => {\n    const response = await Models.getModels(ModelActions.CLONE, sourcePath, '');\n    Notification.show(\"Cloning successful: \" + response);\n    setDialogOpened(false);\n  };\n\n  const handleInputChange = (e: TextFieldValueChangedEvent) => {\n    setSourcePath(e.detail.value);\n  };\n\n  return (\n    <>\n      <section className=\"flex p-m gap-m items-end\">\n        <TextField\n          label=\"Source Path\"\n          value={sourcePath}\n          onValueChanged={handleInputChange}\n        />\n        <Button\n          onClick={() => openDialog('Are you sure you want to clone this model?', handleClone)}\n          style={{ backgroundColor: 'blue' }}>Clone Model</Button>\n      </section>\n      <Dialog opened={dialogOpened} onOpenedChanged={(e) => setDialogOpened(e.detail.value)}>\n        <div>\n          <p>{dialogMessage}</p>\n          <div className=\"flex gap-s\">\n            <Button theme=\"primary\" onClick={() => {\n              dialogAction();\n              handleDialogClose();\n            }}>\n              Yes\n            </Button>\n            <Button theme=\"secondary\" onClick={handleDialogClose}>\n              No\n            </Button>\n          </div>\n        </div>\n      </Dialog>\n    </>\n  );\n};\n\nexport default CloneModelView;\n"]}