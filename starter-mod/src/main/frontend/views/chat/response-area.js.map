{"version":3,"file":"response-area.js","sourceRoot":"","sources":["response-area.tsx"],"names":[],"mappings":";AAAA,OAAc,EAAE,QAAQ,EAAE,SAAS,EAAE,MAAM,OAAO,CAAC;AACnD,OAAO,EAAE,QAAQ,EAAE,MAAM,sCAAsC,CAAC;AAChE,OAAO,EAAE,UAAU,EAAE,MAAM,cAAc,CAAC;AAC1C,OAAO,EAAE,aAAa,EAAE,MAAM,2BAA2B,CAAC;AAS1D,MAAM,YAAY,GAAgC,CAAC,EAAE,OAAO,EAAE,kBAAkB,EAAE,SAAS,EAAE,EAAE,EAAE;IAC/F,MAAM,CAAC,QAAQ,EAAE,WAAW,CAAC,GAAG,QAAQ,CAAC,EAAE,CAAC,CAAC;IAC7C,IAAI,YAA0B,CAAC;IAE/B,SAAS,CAAC,GAAG,EAAE;QACb,IAAI,OAAO,EAAE,CAAC;YACZ,SAAS,CAAC,IAAI,CAAC,CAAC;YAChB,YAAY,GAAG,UAAU,CAAC,WAAW,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,SAAS,CAAC;gBACtE,IAAI,EAAE,CAAC,UAAU,EAAE,EAAE;oBACnB,WAAW,CAAC,UAAU,CAAC,CAAC;oBACxB,kBAAkB,CAAC,UAAU,CAAC,CAAC;oBAC/B,SAAS,CAAC,KAAK,CAAC,CAAC;gBACnB,CAAC;gBACD,KAAK,EAAE,GAAG,EAAE;oBACV,SAAS,CAAC,KAAK,CAAC,CAAC;gBACnB,CAAC;aACF,CAAC,CAAC;QACL,CAAC;QACD,OAAO,GAAG,EAAE,CAAC,YAAY,EAAE,WAAW,EAAE,CAAC;IAC3C,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;IAEd,OAAO,CACL,KAAC,QAAQ,IACP,KAAK,EAAC,aAAa,EACnB,KAAK,EAAE,QAAQ,EACf,QAAQ,QACR,KAAK,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE,GACxB,CACH,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,YAAY,CAAC","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { TextArea } from '@vaadin/react-components/TextArea.js';\nimport { ChatClient } from './ChatClient';\nimport { MessageAction } from '../../enums/MessageAction';\nimport { Subscription } from 'rxjs';\n\ninterface ResponseAreaProps {\n  request: string;\n  onResponseReceived: (aiResponse: string) => void;\n  onLoading: (loading: boolean) => void;\n}\n\nconst ResponseArea: React.FC<ResponseAreaProps> = ({ request, onResponseReceived, onLoading }) => {\n  const [response, setResponse] = useState('');\n  let subscription: Subscription;\n\n  useEffect(() => {\n    if (request) {\n      onLoading(true);\n      subscription = ChatClient.getMessages(MessageAction.RESPONSE).subscribe({\n        next: (aiResponse) => {\n          setResponse(aiResponse);\n          onResponseReceived(aiResponse);\n          onLoading(false);\n        },\n        error: () => {\n          onLoading(false);\n        }\n      });\n    }\n    return () => subscription?.unsubscribe();\n  }, [request]);\n\n  return (\n    <TextArea\n      label=\"AI Response\"\n      value={response}\n      readonly\n      style={{ width: '100%' }}\n    />\n  );\n};\n\nexport default ResponseArea;\n"]}