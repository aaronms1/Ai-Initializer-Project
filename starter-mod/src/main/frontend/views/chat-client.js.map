{"version":3,"file":"chat-client.js","sourceRoot":"","sources":["chat-client.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,EAAE,EAAE,SAAS,EAAE,MAAM,OAAO,CAAC;AACzC,OAAO,EAAE,IAAI,EAAE,WAAW,EAAE,MAAM,0BAA0B,CAAC;AAC7D,OAAO,UAAU,MAAM,WAAW,CAAC;AACnC,OAAO,gBAAgB,MAAM,sBAAsB,CAAC;AAIpD,MAAM,CAAC,MAAM,MAAM,GAAe;IAChC,IAAI,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,IAAI,EAAE,8BAA8B,EAAE;IACxD,KAAK,EAAE,aAAa;CACrB,CAAC;AA0BF;;;;;GAKG;AACH,MAAM,UAAW,SAAQ,SAA2C;IAClE,YAAY,KAAsB;QAChC,KAAK,CAAC,KAAK,CAAC,CAAC;QA8Df;;;;;;WAMG;QACH,iBAAY,GAAG,CAAC,KAAU,EAAE,EAAE;YAC5B,MAAM,WAAW,GAAG,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC;YACvC,MAAM,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;YACjD,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;YACjC,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;QAChC,CAAC,CAAC;QAzEA,IAAI,CAAC,KAAK,GAAG;YACX,QAAQ,EAAE,EAAE;SACb,CAAC;IACJ,CAAC;IAED;;;;;;OAMG;IACH,YAAY,CAAC,UAAkB;QAC7B,MAAM,SAAS,GAAG;YAChB,IAAI,EAAE,UAAU;YAChB,IAAI,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;YAC9B,QAAQ,EAAE,IAAI;YACd,cAAc,EAAE,CAAC;YACjB,OAAO,EAAE,IAAI,CAAC,oBAAoB,EAAE;SACrC,CAAC;QACF,IAAI,CAAC,QAAQ,CAAC,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;YAC5B,QAAQ,EAAE,CAAC,GAAG,SAAS,CAAC,QAAQ,EAAE,SAAS,CAAC;SAC7C,CAAC,CAAC,CAAC;IACN,CAAC;IAED;;;;;;OAMG;IACH,cAAc,CAAC,WAAmB;QAChC,MAAM,WAAW,GAAG;YAClB,IAAI,EAAE,WAAW;YACjB,IAAI,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;YAC9B,QAAQ,EAAE,MAAM;YAChB,cAAc,EAAE,CAAC;YACjB,OAAO,EAAE,IAAI,CAAC,oBAAoB,EAAE;SACrC,CAAC;QACF,IAAI,CAAC,QAAQ,CAAC,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;YAC5B,QAAQ,EAAE,CAAC,GAAG,SAAS,CAAC,QAAQ,EAAE,WAAW,CAAC;SAC/C,CAAC,CAAC,CAAC;IACN,CAAC;IAED;;;;;OAKG;IACH,oBAAoB;QAClB,OAAO,CACL,eAAK,SAAS,EAAC,iBAAiB,aAC9B,KAAC,IAAI,IAAC,IAAI,EAAC,kBAAkB,GAAG,EAChC,KAAC,IAAI,IAAC,IAAI,EAAC,oBAAoB,GAAG,EAClC,KAAC,IAAI,IAAC,IAAI,EAAC,cAAc,GAAG,IACxB,CACP,CAAC;IACJ,CAAC;IAgBD;;;;;;OAMG;IACH,WAAW,CAAC,OAAe;QACzB,2CAA2C;QAC3C,OAAO,cAAc,OAAO,EAAE,CAAC;IACjC,CAAC;IAED,MAAM;QACJ,OAAO,CACL,MAAC,UAAU,eACT,KAAC,WAAW,IAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAI,EAC3C,KAAC,gBAAgB,IAAC,QAAQ,EAAE,IAAI,CAAC,YAAY,GAAI,IACtC,CACd,CAAC;IACJ,CAAC;CACF;AAED,eAAe,UAAU,CAAC","sourcesContent":["import React, { Component } from 'react';\nimport { Icon, MessageList } from '@vaadin/react-components';\nimport MainLayout from './@layout';\nimport MainMessageInput from './main-message-input';\nimport { ViewConfig } from '@vaadin/hilla-file-router/types.js';\nimport { MessagesService } from 'Frontend/generated/endpoints.js';\n\nexport const config: ViewConfig = {\n  menu: { order: 1, icon: 'line-awesome/svg/rocket-chat' },\n  title: 'Chat Client',\n};\n\n/**\n * {@link ChatClientProps}\n * <p>\n *   This is the props interface for the chat client component\n * </p>\n */\ninterface ChatClientProps {}\n\n/**\n * {@link ChatClientState}\n * <p>\n *   This is the state interface for the chat client component\n * </p>\n */\ninterface ChatClientState {\n  messages: {\n    text: string;\n    time: string;\n    userName: string;\n    userColorIndex: number;\n    options: React.ReactNode;\n  }[];\n}\n\n/**\n * {@link ChatClient}\n * <p>\n *   This is the main chat client component that renders a chat client\n * </p>\n */\nclass ChatClient extends Component<ChatClientProps, ChatClientState> {\n  constructor(props: ChatClientProps) {\n    super(props);\n    this.state = {\n      messages: [],\n    };\n  }\n\n  /**\n   * {@link #addAiMessage}\n   * <p>\n   *   This method adds an AI message to the chat client\n   * </p>\n   * @param aiResponse\n   */\n  addAiMessage(aiResponse: string) {\n    const aiMessage = {\n      text: aiResponse,\n      time: new Date().toISOString(),\n      userName: 'AI',\n      userColorIndex: 2,\n      options: this.renderMessageOptions(),\n    };\n    this.setState((prevState) => ({\n      messages: [...prevState.messages, aiMessage],\n    }));\n  }\n\n  /**\n   * {@link #addUserMessage}\n   * <p>\n   *   This method adds a user message to the chat client\n   * </p>\n   * @param userRequest\n   */\n  addUserMessage(userRequest: string) {\n    const userMessage = {\n      text: userRequest,\n      time: new Date().toISOString(),\n      userName: 'User',\n      userColorIndex: 1,\n      options: this.renderMessageOptions(),\n    };\n    this.setState((prevState) => ({\n      messages: [...prevState.messages, userMessage],\n    }));\n  }\n\n  /**\n   * {@link #renderMessageOptions}\n   * <p>\n   *   This method renders message options\n   * </p>\n   */\n  renderMessageOptions() {\n    return (\n      <div className=\"message-options\">\n        <Icon icon=\"vaadin:thumbs-up\" />\n        <Icon icon=\"vaadin:thumbs-down\" />\n        <Icon icon=\"vaadin:trash\" />\n      </div>\n    );\n  }\n\n  /**\n   * {@link #handleSubmit}\n   * <p>\n   *   This method handles the submit event\n   * </p>\n   * @param event\n   */\n  handleSubmit = (event: any) => {\n    const userRequest = event.detail.value;\n    const aiResponse = this.sendMessage(userRequest);\n    this.addUserMessage(userRequest);\n    this.addAiMessage(aiResponse);\n  };\n\n  /**\n   * {@link #sendMessage}\n   * <p>\n   *   This method sends a message\n   * </p>\n   * @param message\n   */\n  sendMessage(message: string) {\n    // Placeholder for message processing logic\n    return `Processed: ${message}`;\n  }\n\n  render() {\n    return (\n      <MainLayout>\n        <MessageList items={this.state.messages} />\n        <MainMessageInput onSubmit={this.handleSubmit} />\n      </MainLayout>\n    );\n  }\n}\n\nexport default ChatClient;\n"]}