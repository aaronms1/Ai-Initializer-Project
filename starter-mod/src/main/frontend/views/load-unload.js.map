{"version":3,"file":"load-unload.js","sourceRoot":"","sources":["load-unload.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,EAAE,EAAE,SAAS,EAAE,MAAM,OAAO,CAAC;AACzC,OAAO,EAAE,YAAY,EAAE,MAAM,sBAAsB,CAAC;AACpD,OAAO,EAAE,sBAAsB,EAAE,MAAM,iCAAiC,CAAC;AAYzE;;;;;GAKG;AACH,MAAM,mBAAoB,SAAQ,SAAuC;IACrE,YAAY,KAAS;QACjB,KAAK,CAAC,KAAK,CAAC,CAAC;QAMjB;;;;;;WAMG;QACH,cAAS,GAAG,KAAK,EAAE,SAAiB,EAAE,EAAE;YACpC,IAAI,CAAC;gBACD,MAAM,IAAI,GAAG,MAAM,sBAAsB,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;gBAC/D,IAAI,CAAC,QAAQ,CAAC,EAAE,SAAS,EAAE,IAAI,UAAU,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;gBACnD,YAAY,CAAC,IAAI,CAAC,2BAA2B,CAAC,CAAC;YACnD,CAAC;YAAC,OAAO,KAAU,EAAE,CAAC;gBAClB,YAAY,CAAC,IAAI,CAAC,uBAAuB,GAAG,KAAK,CAAC,OAAO,EAAE,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC;YACnF,CAAC;QACL,CAAC,CAAC;QAEF;;;;;WAKG;QACH,gBAAW,GAAG,KAAK,IAAI,EAAE;YACrB,MAAM,EAAE,SAAS,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;YACjC,IAAI,SAAS,EAAE,CAAC;gBACZ,IAAI,CAAC;oBACD,MAAM,OAAO,GAAG,MAAM,sBAAsB,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;oBAChF,IAAI,OAAO,EAAE,CAAC;wBACV,IAAI,CAAC,QAAQ,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;wBACnC,YAAY,CAAC,IAAI,CAAC,6BAA6B,CAAC,CAAC;oBACrD,CAAC;yBAAM,CAAC;wBACJ,YAAY,CAAC,IAAI,CAAC,uBAAuB,EAAE,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC;oBACnE,CAAC;gBACL,CAAC;gBAAC,OAAO,KAAU,EAAE,CAAC;oBAClB,YAAY,CAAC,IAAI,CAAC,yBAAyB,GAAG,KAAK,CAAC,OAAO,EAAE,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC;gBACrF,CAAC;YACL,CAAC;QACL,CAAC,CAAC;QA3CE,IAAI,CAAC,KAAK,GAAG;YACT,SAAS,EAAE,IAAI;SAClB,CAAC;IACN,CAAC;IA0CD;;;;;OAKG;IACH,MAAM;QACF,MAAM,EAAE,SAAS,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QAEjC,OAAO,CACH,0BACI,iBAAQ,OAAO,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,2BAAqB,EAC3E,iBAAQ,OAAO,EAAE,IAAI,CAAC,WAAW,EAAE,QAAQ,EAAE,CAAC,SAAS,6BAAuB,IAC5E,CACT,CAAC;IACN,CAAC;CACJ;AAED,eAAe,mBAAmB,CAAC","sourcesContent":["import React, { Component } from 'react';\nimport { Notification } from '@vaadin/notification';\nimport { ModelLoadUnloadService } from 'Frontend/generated/endpoints.js';\n\n/**\n * {@link LoadUnloadComponentState}\n * <p>\n *   This is the state interface for the load-unload component\n * </p>\n */\ninterface LoadUnloadComponentState {\n    modelData: Uint8Array | null;\n}\n\n/**\n * {@link LoadUnloadComponent}\n * <p>\n *   This is the main load-unload component that handles loading and unloading models\n * </p>\n */\nclass LoadUnloadComponent extends Component<{}, LoadUnloadComponentState> {\n    constructor(props: {}) {\n        super(props);\n        this.state = {\n            modelData: null,\n        };\n    }\n\n    /**\n     * {@link #loadModel}\n     * <p>\n     *   This method loads a model from the specified path\n     * </p>\n     * @param modelPath\n     */\n    loadModel = async (modelPath: string) => {\n        try {\n            const data = await ModelLoadUnloadService.loadModel(modelPath);\n            this.setState({ modelData: new Uint8Array(data) });\n            Notification.show('Model loaded successfully');\n        } catch (error: any) {\n            Notification.show('Error loading model: ' + error.message, { theme: 'error' });\n        }\n    };\n\n    /**\n     * {@link #unloadModel}\n     * <p>\n     *   This method unloads the currently loaded model\n     * </p>\n     */\n    unloadModel = async () => {\n        const { modelData } = this.state;\n        if (modelData) {\n            try {\n                const success = await ModelLoadUnloadService.unloadModel(Array.from(modelData));\n                if (success) {\n                    this.setState({ modelData: null });\n                    Notification.show('Model unloaded successfully');\n                } else {\n                    Notification.show('Error unloading model', { theme: 'error' });\n                }\n            } catch (error: any) {\n                Notification.show('Error unloading model: ' + error.message, { theme: 'error' });\n            }\n        }\n    };\n\n    /**\n     * {@link #render}\n     * <p>\n     *   This function renders the load and unload buttons\n     * </p>\n     */\n    render() {\n        const { modelData } = this.state;\n\n        return (\n            <div>\n                <button onClick={() => this.loadModel('path/to/model')}>Load Model</button>\n                <button onClick={this.unloadModel} disabled={!modelData}>Unload Model</button>\n            </div>\n        );\n    }\n}\n\nexport default LoadUnloadComponent;\n"]}