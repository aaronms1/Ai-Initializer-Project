{"version":3,"file":"notifications.js","sourceRoot":"","sources":["notifications.tsx"],"names":[],"mappings":";AAAA,OAAc,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AACnD,OAAO,EAAE,OAAO,EAAE,MAAM,MAAM,CAAC;AAC/B,OAAO,EAAE,IAAI,EAAE,MAAM,gBAAgB,CAAC;AACtC,OAAO,sBAAsB,CAAC;AAU9B,2CAA2C;AAC3C,MAAM,mBAAmB,GAAG,IAAI,OAAO,EAAgB,CAAC;AAExD,+CAA+C;AAC/C,MAAM,CAAC,MAAM,mBAAmB,GAAG;IAC/B,IAAI,EAAE,CAAC,OAAe,EAAE,OAAyB,MAAM,EAAE,EAAE;QACvD,MAAM,EAAE,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,8BAA8B;QACrD,mBAAmB,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,wBAAwB;IAC7E,CAAC;CACJ,CAAC;AAEF,MAAM,aAAa,GAAa,GAAG,EAAE;IACjC,MAAM,CAAC,aAAa,EAAE,gBAAgB,CAAC,GAAG,QAAQ,CAAiB,EAAE,CAAC,CAAC;IAEvE,SAAS,CAAC,GAAG,EAAE;QACX,wCAAwC;QACxC,MAAM,YAAY,GAAG,mBAAmB;aACnC,IAAI;QACD,qCAAqC;QACrC,IAAI,CACA,CAAC,gBAAgC,EAAE,eAA6B,EAAE,EAAE;YAChE,uBAAuB;YACvB,MAAM,uBAAuB,GAAG,CAAC,GAAG,gBAAgB,EAAE,eAAe,CAAC,CAAC;YAEvE,wCAAwC;YACxC,UAAU,CAAC,GAAG,EAAE;gBACZ,gBAAgB,CAAC,CAAC,OAAO,EAAE,EAAE,CACzB,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,eAAe,CAAC,EAAE,CAAC,CACrD,CAAC;YACN,CAAC,EAAE,IAAI,CAAC,CAAC;YAET,OAAO,uBAAuB,CAAC;QACnC,CAAC,EACD,EAAE,CAAC,0DAA0D;SAChE,CACJ;aACA,SAAS,CAAC,CAAC,oBAAoB,EAAE,EAAE,CAAC,gBAAgB,CAAC,oBAAoB,CAAC,CAAC,CAAC;QAEjF,6CAA6C;QAC7C,OAAO,GAAG,EAAE,CAAC,YAAY,CAAC,WAAW,EAAE,CAAC;IAC5C,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,OAAO,CACH,cAAK,SAAS,EAAC,yBAAyB,YACnC,aAAa,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,CAC1C,cAAc,SAAS,EAAE,gBAAgB,IAAI,EAAE,YAC1C,OAAO,IADF,EAAE,CAEN,CACT,CAAC,GACA,CACT,CAAC;AACN,CAAC,CAAC;AAEF,eAAe,aAAa,CAAC","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Subject } from \"rxjs\";\nimport { scan } from \"rxjs/operators\";\nimport \"./notifications.scss\";\n\n// Define notification types and interface\ntype NotificationType = \"success\" | \"error\" | \"info\";\ninterface Notification {\n    id: number;\n    message: string;\n    type: NotificationType;\n}\n\n// Create an RxJS Subject for notifications\nconst notificationSubject = new Subject<Notification>();\n\n// Expose the notification service as a utility\nexport const NotificationService = {\n    show: (message: string, type: NotificationType = \"info\") => {\n        const id = Date.now(); // Unique ID for notifications\n        notificationSubject.next({ id, message, type }); // Emit message and type\n    },\n};\n\nconst Notifications: React.FC = () => {\n    const [notifications, setNotifications] = useState<Notification[]>([]);\n\n    useEffect(() => {\n        // Subscribe to the notification subject\n        const subscription = notificationSubject\n            .pipe(\n                // Accumulate notifications over time\n                scan<Notification, Notification[]>(\n                    (allNotifications: Notification[], newNotification: Notification) => {\n                        // Add new notification\n                        const notificationWithRemoval = [...allNotifications, newNotification];\n\n                        // Schedule auto-removal after 5 seconds\n                        setTimeout(() => {\n                            setNotifications((current) =>\n                                current.filter((n) => n.id !== newNotification.id)\n                            );\n                        }, 5000);\n\n                        return notificationWithRemoval;\n                    },\n                    [] // Provide an empty array with explicit typing as the seed\n                )\n            )\n            .subscribe((updatedNotifications) => setNotifications(updatedNotifications));\n\n        // Clean up subscription on component unmount\n        return () => subscription.unsubscribe();\n    }, []);\n\n    return (\n        <div className=\"notifications-container\">\n            {notifications.map(({ id, message, type }) => (\n                <div key={id} className={`notification ${type}`}>\n                    {message}\n                </div>\n            ))}\n        </div>\n    );\n};\n\nexport default Notifications;"]}