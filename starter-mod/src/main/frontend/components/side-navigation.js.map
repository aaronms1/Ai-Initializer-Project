{"version":3,"file":"side-navigation.js","sourceRoot":"","sources":["side-navigation.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,MAAM,OAAO,CAAC;AAChD,OAAO,wBAAwB,CAAC;AAOhC,MAAM,cAAc,GAAkC,CAAC,EAAE,QAAQ,EAAE,QAAQ,EAAE,EAAE,EAAE;IAC/E,MAAM,CAAC,MAAM,EAAE,SAAS,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC;IAC5C,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,gBAAgB;IACzD,MAAM,MAAM,GAAG,MAAM,CAAiB,IAAI,CAAC,CAAC;IAC5C,MAAM,UAAU,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;IAEjC,MAAM,eAAe,GAAG,GAAG,EAAE;QAC3B,UAAU,CAAC,OAAO,GAAG,IAAI,CAAC;IAC5B,CAAC,CAAC;IAEF,MAAM,eAAe,GAAG,CAAC,CAAa,EAAE,EAAE;QACxC,IAAI,UAAU,CAAC,OAAO,IAAI,MAAM,CAAC,OAAO,EAAE,CAAC;YACzC,MAAM,QAAQ,GAAG,QAAQ,KAAK,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,UAAU,GAAG,CAAC,CAAC,OAAO,CAAC;YACjF,QAAQ,CAAC,QAAQ,CAAC,CAAC;QACrB,CAAC;IACH,CAAC,CAAC;IAEF,MAAM,aAAa,GAAG,GAAG,EAAE;QACzB,UAAU,CAAC,OAAO,GAAG,KAAK,CAAC;IAC7B,CAAC,CAAC;IAEF,KAAK,CAAC,SAAS,CAAC,GAAG,EAAE;QACnB,QAAQ,CAAC,gBAAgB,CAAC,WAAW,EAAE,eAAe,CAAC,CAAC;QACxD,QAAQ,CAAC,gBAAgB,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC;QACpD,OAAO,GAAG,EAAE;YACV,QAAQ,CAAC,mBAAmB,CAAC,WAAW,EAAE,eAAe,CAAC,CAAC;YAC3D,QAAQ,CAAC,mBAAmB,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC;QACzD,CAAC,CAAC;IACJ,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,OAAO,CACL,0BACE,kBAAQ,OAAO,EAAE,GAAG,EAAE,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,oCAAsB,QAAQ,SAAW,EAClF,eACE,GAAG,EAAE,MAAM,EACX,KAAK,EAAE,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC,CAAC,GAAG,KAAK,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,aAE/C,QAAQ,EACT,cACE,SAAS,EAAC,eAAe,EACzB,WAAW,EAAE,eAAe,EAC5B,KAAK,EAAE,EAAE,MAAM,EAAE,WAAW,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,UAAU,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,GAC1G,IACE,IACF,CACP,CAAC;AACJ,CAAC,CAAC;AAEF;;;;GAIG;AACH,eAAe,cAAc,CAAC","sourcesContent":["import React, { useState, useRef } from 'react';\nimport './side-navigation.scss';\n\ninterface SideNavigationProps {\n  position: 'left' | 'right';\n  children?: React.ReactNode;\n}\n\nconst SideNavigation: React.FC<SideNavigationProps> = ({ position, children }) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [width, setWidth] = useState(300); // Initial width\n  const navRef = useRef<HTMLDivElement>(null);\n  const isResizing = useRef(false);\n\n  const handleMouseDown = () => {\n    isResizing.current = true;\n  };\n\n  const handleMouseMove = (e: MouseEvent) => {\n    if (isResizing.current && navRef.current) {\n      const newWidth = position === 'left' ? e.clientX : window.innerWidth - e.clientX;\n      setWidth(newWidth);\n    }\n  };\n\n  const handleMouseUp = () => {\n    isResizing.current = false;\n  };\n\n  React.useEffect(() => {\n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('mouseup', handleMouseUp);\n    return () => {\n      document.removeEventListener('mousemove', handleMouseMove);\n      document.removeEventListener('mouseup', handleMouseUp);\n    };\n  }, []);\n\n  return (\n    <div>\n      <button onClick={() => setIsOpen(!isOpen)}>Toggle Navigation ({position})</button>\n      <div\n        ref={navRef}\n        style={{ maxWidth: isOpen ? `${width}px` : '0' }}\n      >\n        {children}\n        <div\n          className=\"resize-handle\"\n          onMouseDown={handleMouseDown}\n          style={{ cursor: 'ew-resize', width: '10px', height: '100%', position: 'absolute', top: 0, [position]: 0 }}\n        />\n      </div>\n    </div>\n  );\n};\n\n/**\n * <h1>{@link SideNavigation}</h1>\n * side nav component that excepts any child, and renders on either left or\n * right side of the screen.\n */\nexport default SideNavigation;\n"]}