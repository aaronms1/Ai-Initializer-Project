{"version":3,"file":"dialog.js","sourceRoot":"","sources":["dialog.tsx"],"names":[],"mappings":";AAAA,OAAc,EAAE,SAAS,EAAE,MAAM,OAAO,CAAC;AACzC,OAAO,SAAS,MAAM,iBAAiB,CAAC;AACxC,OAAO,EAAE,YAAY,EAAE,MAAM,iBAAiB,CAAC;AAC/C,OAAO,eAAe,CAAC;AACvB,OAAO,MAAM,MAAM,UAAU,CAAC;AA6B9B,MAAM,MAAM,GAA0B,CAAC,EACrC,MAAM,EACN,OAAO,EACP,OAAO,EACP,QAAQ,EACR,MAAM,EACN,eAAe,EAChB,EAAE,EAAE;IACH,SAAS,CAAC,GAAG,EAAE;QACb,IAAI,eAAe,EAAE,CAAC;YACpB,MAAM,KAAK,GAAsB;gBAC/B,MAAM,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE;gBACzB,WAAW,EAAE,EAAW;gBACxB,aAAa,EAAE,EAAsB;gBACrC,OAAO,EAAE,KAAK;gBACd,UAAU,EAAE,KAAK;gBACjB,gBAAgB,EAAE,KAAK;gBACvB,UAAU,EAAE,CAAC;gBACb,SAAS,EAAE,IAAI;gBACf,cAAc,EAAE,GAAG,EAAE,GAAE,CAAC;gBACxB,kBAAkB,EAAE,GAAG,EAAE,CAAC,KAAK;gBAC/B,eAAe,EAAE,GAAG,EAAE,GAAE,CAAC;gBACzB,oBAAoB,EAAE,GAAG,EAAE,CAAC,KAAK;gBACjC,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;gBACrB,IAAI,EAAE,QAAQ;gBACd,OAAO,EAAE,GAAG,EAAE,GAAE,CAAC;aAClB,CAAC;YACF,eAAe,CAAC,KAAK,CAAC,CAAC;QACzB,CAAC;IACH,CAAC,EAAE,CAAC,MAAM,EAAE,eAAe,CAAC,CAAC,CAAC;IAE9B,IAAI,CAAC,MAAM;QAAE,OAAO,IAAI,CAAC;IAEzB,OAAO,CACL,cAAK,SAAS,EAAC,gBAAgB,YAC7B,KAAC,SAAS,cACR,KAAC,YAAY,IAAC,KAAK,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE,cAAc,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,cAAc,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,YAC3F,eAAK,SAAS,EAAC,QAAQ,aACrB,sBAAI,OAAO,GAAK,EACf,QAAQ,OACT,KAAC,MAAM,IAAC,OAAO,EAAE,OAAO,EAAE,SAAS,EAAC,cAAc,sBAAe,IAC7D,GACO,GACL,GACR,CACP,CAAC;AACJ,CAAC,CAAC;AAEF;;;GAGG;AACH,eAAe,MAAM,CAAC","sourcesContent":["import React, { useEffect } from 'react';\nimport Draggable from 'react-draggable';\nimport { ResizableBox } from 'react-resizable';\nimport './Dialog.scss';\nimport Button from './button';\n\ninterface DialogProps {\n  isOpen: boolean,\n  message: string,\n  onClose: () => void,\n  children?: React.ReactNode,\n  opened?: boolean,\n  onOpenedChanged?: (e: CustomChangeEvent) => void\n}\n\ninterface CustomChangeEvent {\n  target: { value: boolean | undefined };\n  nativeEvent: Event;\n  currentTarget: HTMLInputElement;\n  bubbles: boolean;\n  cancelable: boolean;\n  defaultPrevented: boolean;\n  eventPhase: number;\n  isTrusted: boolean;\n  preventDefault: () => void;\n  isDefaultPrevented: () => boolean;\n  stopPropagation: () => void;\n  isPropagationStopped: () => boolean;\n  timeStamp: number;\n  type: string;\n  persist: () => void;\n}\n\nconst Dialog: React.FC<DialogProps> = ({\n  isOpen,\n  message,\n  onClose,\n  children,\n  opened,\n  onOpenedChanged\n}) => {\n  useEffect(() => {\n    if (onOpenedChanged) {\n      const event: CustomChangeEvent = {\n        target: { value: opened },\n        nativeEvent: {} as Event,\n        currentTarget: {} as HTMLInputElement,\n        bubbles: false,\n        cancelable: false,\n        defaultPrevented: false,\n        eventPhase: 0,\n        isTrusted: true,\n        preventDefault: () => {},\n        isDefaultPrevented: () => false,\n        stopPropagation: () => {},\n        isPropagationStopped: () => false,\n        timeStamp: Date.now(),\n        type: 'change',\n        persist: () => {}\n      };\n      onOpenedChanged(event);\n    }\n  }, [opened, onOpenedChanged]);\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"dialog-overlay\">\n      <Draggable>\n        <ResizableBox width={300} height={200} minConstraints={[150, 100]} maxConstraints={[600, 400]}>\n          <div className=\"dialog\">\n            <p>{message}</p>\n            {children} {/* Render children */}\n            <Button onClick={onClose} className=\"small-button\">Close</Button>\n          </div>\n        </ResizableBox>\n      </Draggable>\n    </div>\n  );\n};\n\n/**\n * <h1>{@link Dialog}</h1>\n * dialog component.\n */\nexport default Dialog;\n"]}