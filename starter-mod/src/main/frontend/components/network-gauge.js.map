{"version":3,"file":"network-gauge.js","sourceRoot":"","sources":["network-gauge.tsx"],"names":[],"mappings":";AAAA,OAAc,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AACnD,OAAO,EAAE,WAAW,EAAE,MAAM,8BAA8B,CAAC;AAC3D,OAAO,EAAE,aAAa,EAAE,MAAM,2BAA2B,CAAC;AAC1D,OAAO,EAAE,YAAY,EAAE,MAAM,wBAAwB,CAAC;AAOtD,MAAM,YAAY,GAAgC,CAAC,EAAE,KAAK,EAAE,SAAS,EAAE,EAAE,EAAE;IACzE,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;IACtC,IAAI,YAA0B,CAAC;IAE/B,SAAS,CAAC,GAAG,EAAE;QACb,YAAY,GAAG,aAAa,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE;YAClE,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACvB,CAAC,CAAC,CAAC;QACH,OAAO,GAAG,EAAE,CAAC,YAAY,CAAC,WAAW,EAAE,CAAC;IAC1C,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,MAAM,YAAY,GAAG;QACnB,KAAK,EAAE,SAAS,IAAI,KAAK;QACzB,KAAK,EAAE;YACL,GAAG,EAAE,GAAG;YACR,SAAS,EAAE,EAAE;YACb,SAAS,EAAE,CAAC;YACZ,MAAM,EAAE;gBACN,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,KAAK,EAAE,SAAS,EAAE;gBACrC,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,KAAK,EAAE,SAAS,EAAE;gBACtC,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,KAAK,EAAE,SAAS,EAAE;aACxC;SACF;QACD,OAAO,EAAE;YACP,KAAK,EAAE,SAAS,IAAI,KAAK;SAC1B;KACF,CAAC;IAEF,OAAO,KAAC,WAAW,OAAK,YAAY,GAAI,CAAC;AAC3C,CAAC,CAAC;AAEF;;;GAGG;AACH,eAAe,YAAY,CAAC","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { RadialGauge } from '@progress/kendo-react-gauges';\nimport { MetricsBridge } from '../bridges/metrics-bridge';\nimport { MetricsTypes } from '../enums/metrics-types';\nimport { Subscription } from 'rxjs';\n\ninterface NetworkGaugeProps {\n  value?: number;\n}\n\nconst NetworkGauge: React.FC<NetworkGaugeProps> = ({ value: propValue }) => {\n  const [value, setValue] = useState(0);\n  let subscription: Subscription;\n\n  useEffect(() => {\n    subscription = MetricsBridge(MetricsTypes.NETWORK).subscribe(data => {\n      setValue(data.value);\n    });\n    return () => subscription.unsubscribe();\n  }, []);\n\n  const gaugeOptions = {\n    value: propValue ?? value,\n    scale: {\n      max: 100,\n      majorUnit: 20,\n      minorUnit: 2,\n      ranges: [\n        { from: 0, to: 40, color: '#28a745' },\n        { from: 40, to: 70, color: '#ffc107' },\n        { from: 70, to: 100, color: '#dc3545' }\n      ]\n    },\n    pointer: {\n      value: propValue ?? value\n    }\n  };\n\n  return <RadialGauge {...gaugeOptions} />;\n};\n\n/**\n * <h1>{@link NetworkGauge}</h1>\n * gauge to display network usage, we may get rid of this component\n */\nexport default NetworkGauge;\n"]}