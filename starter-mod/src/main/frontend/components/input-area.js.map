{"version":3,"file":"input-area.js","sourceRoot":"","sources":["input-area.tsx"],"names":[],"mappings":";AAAA,OAAc,EAAE,QAAQ,EAAe,MAAM,OAAO,CAAC;AACrD,OAAO,kBAAkB,CAAC;AAkB1B;;;;;;;;;;;;GAYG;AACH,MAAM,SAAS,GAA6B,CAAC,EAC3C,IAAI,GAAG,MAAM,EACb,KAAK,EAAE,YAAY,GAAG,EAAE,EACxB,WAAW,EACX,SAAS,EACT,QAAQ,EACR,KAAK,EACL,QAAQ,EACR,KAAK,EACL,cAAc,EACf,EAAE,EAAE;IACH,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,QAAQ,CAAkB,YAAY,CAAC,CAAC;IAElE,MAAM,YAAY,GAAG,CAAC,KAAoC,EAAE,EAAE;QAC5D,MAAM,QAAQ,GAAG,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC;QACpC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QAEnB,gDAAgD;QAChD,IAAI,QAAQ,EAAE,CAAC;YACb,QAAQ,CAAC,QAAQ,CAAC,CAAC;QACrB,CAAC;QAED,2CAA2C;QAC3C,IAAI,cAAc,EAAE,CAAC;YACnB,cAAc,CAAC,EAAE,MAAM,EAAE,EAAE,KAAK,EAAE,QAAQ,EAAE,EAAE,CAAC,CAAC;QAClD,CAAC;IACH,CAAC,CAAC;IAEF,MAAM,cAAc,GAAG,cAAc,SAAS,IAAI,EAAE,EAAE,CAAC;IAEvD,OAAO,CACL,eAAK,SAAS,EAAE,cAAc,aAC3B,KAAK,IAAI,gBAAO,SAAS,EAAC,aAAa,YAAE,KAAK,GAAS,EACxD,gBACE,IAAI,EAAE,IAAI,EACV,KAAK,EAAE,KAAK,EACZ,WAAW,EAAE,WAAW,EACxB,QAAQ,EAAE,YAAY,EACtB,SAAS,EAAC,aAAa,EACvB,QAAQ,EAAE,QAAQ,EAClB,KAAK,EAAE,KAAK,GACZ,IACE,CACP,CAAC;AACJ,CAAC,CAAC;AAEF;;GAEG;AACH,eAAe,SAAS,CAAC","sourcesContent":["import React, { useState, ChangeEvent } from 'react';\nimport './InputArea.scss';\n\nexport interface TextFieldValueChangedEvent {\n  target: { value: string | number };\n}\n\ninterface InputAreaProps {\n  type?: 'text' | 'number' | 'password' | 'email',\n  value?: string | number,\n  placeholder?: string,\n  className?: string,\n  onChange?: (value: string | number) => void,\n  label?: string,\n  readonly?: boolean,\n  style?: { width: string },\n  onValueChanged?: (e: TextFieldValueChangedEvent) => void\n}\n\n/**\n * <h1>{@link InputArea}</h1>\n * @param type the type of input field, defaults to 'text'\n * @param initialValue the initial value of the input field\n * @param placeholder the placeholder text\n * @param className the class name\n * @param onChange the change event handler\n * @param label the label text\n * @param readonly whether the input field is readonly\n * @param style the style object\n * @param onValueChanged the value changed event handler\n * @constructor constructs the InputArea component\n */\nconst InputArea: React.FC<InputAreaProps> = ({\n  type = 'text',\n  value: initialValue = '',\n  placeholder,\n  className,\n  onChange,\n  label,\n  readonly,\n  style,\n  onValueChanged\n}) => {\n  const [value, setValue] = useState<string | number>(initialValue);\n\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const newValue = event.target.value;\n    setValue(newValue);\n\n    // Call parent's `onChange` callback if provided\n    if (onChange) {\n      onChange(newValue);\n    }\n\n    // Trigger onValueChanged event if provided\n    if (onValueChanged) {\n      onValueChanged({ target: { value: newValue } });\n    }\n  };\n\n  const inputClassName = `input-area ${className || ''}`;\n\n  return (\n    <div className={inputClassName}>\n      {label && <label className=\"input-label\">{label}</label>}\n      <input\n        type={type}\n        value={value}\n        placeholder={placeholder}\n        onChange={handleChange}\n        className=\"input-field\"\n        readOnly={readonly}\n        style={style}\n      />\n    </div>\n  );\n};\n\n/**\n * <h1>{@link InputArea}</h1>\n */\nexport default InputArea;\n"]}